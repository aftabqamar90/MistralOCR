@model MistralOCR.Models.DocumentLogsViewModel

@{
    ViewData["Title"] = "Document Question Logs";
}

<style>
    :root {
        --primary-color: #6366f1;
        --primary-hover: #4f46e5;
        --secondary-color: #10b981;
        --secondary-hover: #059669;
        --accent-color: #f59e0b;
        --dark-color: #1f2937;
        --light-color: #f3f4f6;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --hover-transition: all 0.3s ease;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
        color: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--card-shadow);
    }

    .custom-card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: var(--card-shadow);
        transition: var(--hover-transition);
    }

    .custom-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
        color: white;
        border-top-left-radius: 0.5rem !important;
        border-top-right-radius: 0.5rem !important;
        font-weight: 600;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        transition: var(--hover-transition);
    }

    .btn-primary:hover {
        background-color: var(--primary-hover);
        border-color: var(--primary-hover);
        transform: translateY(-2px);
    }

    .btn-outline-secondary {
        color: var(--dark-color);
        border-color: var(--dark-color);
        transition: var(--hover-transition);
    }

    .btn-outline-secondary:hover {
        background-color: var(--dark-color);
        color: white;
        transform: translateY(-2px);
    }

    .section-label {
        color: var(--primary-color);
        font-weight: 600;
    }

    .data-value {
        color: var(--dark-color);
        font-weight: 500;
    }

    .log-item {
        border-left: 4px solid var(--primary-color);
        background-color: var(--light-color);
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
        transition: var(--hover-transition);
    }

    .log-item:hover {
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }

    .log-header {
        cursor: pointer;
        padding: 1rem;
        border-radius: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .log-header:hover {
        background-color: rgba(99, 102, 241, 0.05);
    }

    .log-content {
        padding: 0 1rem 1rem 1rem;
        display: none;
    }

    .log-question {
        background-color: rgba(99, 102, 241, 0.1);
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .log-answer {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
    }

    .log-meta {
        font-size: 0.875rem;
        color: #6b7280;
    }

    .log-model {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        background-color: var(--accent-color);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .log-tokens {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        background-color: var(--secondary-color);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 0;
        color: #6b7280;
    }

    .toggle-icon {
        transition: transform 0.3s ease;
    }

    .rotate-icon {
        transform: rotate(180deg);
    }

    .expand-all-btn {
        font-size: 0.875rem;
        padding: 0.25rem 0.75rem;
    }
</style>

<div class="container-fluid mt-4">
    <div class="page-header d-flex justify-content-between align-items-center">
        <div>
            <h1 class="mb-2">Document Question Logs</h1>
            <p class="lead mb-0">View history of questions and answers for this document</p>
        </div>
        <div>
            <a href="/Home/ProcessDocument/@Model.Document.Id" class="btn btn-outline-secondary me-2">
                <i class="bi bi-file-earmark-text me-1"></i> Process Document
            </a>
            <a href="/" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-1"></i> Back to Home
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="custom-card card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-file-earmark-text me-2"></i>Document Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label section-label">Title</label>
                                <p class="data-value">@Model.Document.Title</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label section-label">Created</label>
                                <p class="data-value">@Model.Document.CreatedAt.ToString("g")</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label section-label">Last Processed</label>
                                <p class="data-value">@(Model.Document.LastProcessedAt?.ToString("g") ?? "Never")</p>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label section-label">URL</label>
                        <p class="text-break data-value">
                            <a href="@Model.Document.Url" target="_blank" class="text-decoration-none">@Model.Document.Url</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="custom-card card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-chat-dots me-2"></i>Question History</h5>
                    <div class="d-flex align-items-center">
                        <div class="input-group me-2">
                            <input type="text" id="questionSearchInput" class="form-control form-control-sm" placeholder="Search questions..." aria-label="Search questions">
                            <button class="btn btn-sm btn-light" type="button" id="questionSearchButton">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                        <button id="expandAllBtn" class="btn btn-sm btn-outline-light expand-all-btn me-2">
                            <i class="bi bi-arrows-expand"></i> Expand All
                        </button>
                        <span class="badge bg-primary rounded-pill">@Model.QuestionLogs.Count logs</span>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.QuestionLogs.Any())
                    {
                        <div id="questionLogsContainer">
                            @foreach (var log in Model.QuestionLogs)
                            {
                                <div class="log-item" data-question="@log.Question.ToLower()" data-answer="@log.Answer.ToLower()" data-model="@log.Model.ToLower()">
                                    <div class="log-header" onclick="toggleLogContent(this)">
                                        <div>
                                            <span class="log-model">@log.Model</span>
                                            @if (log.TotalTokens.HasValue)
                                            {
                                                <span class="log-tokens ms-2">@log.TotalTokens tokens</span>
                                            }
                                            <span class="ms-3 text-truncate d-inline-block" style="max-width: 500px;">@log.Question</span>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <span class="log-meta me-3">@log.CreatedAt.ToString("g")</span>
                                            <i class="bi bi-chevron-down toggle-icon"></i>
                                        </div>
                                    </div>
                                    <div class="log-content">
                                        <div class="log-question">
                                            <strong>Question:</strong>
                                            <p class="mb-0 mt-2">@log.Question</p>
                                        </div>
                                        <div class="log-answer">
                                            <strong>Answer:</strong>
                                            <p class="mb-0 mt-2" style="white-space: pre-wrap;">@log.Answer</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div id="noSearchResults" class="empty-state" style="display: none;">
                            <i class="bi bi-search" style="font-size: 3rem;"></i>
                            <p class="mt-3">No questions match your search criteria</p>
                            <button id="clearSearchBtn" class="btn btn-sm btn-outline-secondary mt-2">
                                <i class="bi bi-x-circle me-1"></i> Clear Search
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                            <p class="mt-3">No questions have been asked about this document yet</p>
                            <a href="/Home/ProcessDocument/@Model.Document.Id" class="btn btn-primary mt-2">
                                <i class="bi bi-chat-dots me-1"></i> Ask Questions
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set up expand all button
            const expandAllBtn = document.getElementById('expandAllBtn');
            let expanded = false;
            
            expandAllBtn.addEventListener('click', function() {
                const logItems = document.querySelectorAll('.log-item');
                expanded = !expanded;
                
                logItems.forEach(item => {
                    const content = item.querySelector('.log-content');
                    const icon = item.querySelector('.toggle-icon');
                    
                    if (expanded) {
                        content.style.display = 'block';
                        icon.classList.add('rotate-icon');
                        expandAllBtn.innerHTML = '<i class="bi bi-arrows-collapse"></i> Collapse All';
                    } else {
                        content.style.display = 'none';
                        icon.classList.remove('rotate-icon');
                        expandAllBtn.innerHTML = '<i class="bi bi-arrows-expand"></i> Expand All';
                    }
                });
            });
            
            // Set up question search
            const searchInput = document.getElementById('questionSearchInput');
            const searchButton = document.getElementById('questionSearchButton');
            const clearSearchBtn = document.getElementById('clearSearchBtn');
            const questionLogsContainer = document.getElementById('questionLogsContainer');
            const noSearchResults = document.getElementById('noSearchResults');
            
            // Search function
            function searchQuestions() {
                const searchTerm = searchInput.value.trim().toLowerCase();
                const logItems = document.querySelectorAll('.log-item');
                let matchFound = false;
                
                if (!searchTerm) {
                    // If search is empty, show all items
                    logItems.forEach(item => {
                        item.style.display = 'block';
                    });
                    questionLogsContainer.style.display = 'block';
                    noSearchResults.style.display = 'none';
                    return;
                }
                
                // Filter log items based on search term
                logItems.forEach(item => {
                    const question = item.getAttribute('data-question');
                    const answer = item.getAttribute('data-answer');
                    const model = item.getAttribute('data-model');
                    
                    if (question.includes(searchTerm) || 
                        answer.includes(searchTerm) || 
                        model.includes(searchTerm)) {
                        item.style.display = 'block';
                        matchFound = true;
                    } else {
                        item.style.display = 'none';
                    }
                });
                
                // Show/hide no results message
                if (matchFound) {
                    questionLogsContainer.style.display = 'block';
                    noSearchResults.style.display = 'none';
                } else {
                    questionLogsContainer.style.display = 'none';
                    noSearchResults.style.display = 'block';
                }
            }
            
            // Set up search button click
            searchButton.addEventListener('click', searchQuestions);
            
            // Enable search on Enter key
            searchInput.addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    searchQuestions();
                }
            });
            
            // Clear search button
            clearSearchBtn.addEventListener('click', function() {
                searchInput.value = '';
                searchQuestions();
            });
        });
        
        // Toggle log content visibility
        function toggleLogContent(header) {
            const logItem = header.closest('.log-item');
            const content = logItem.querySelector('.log-content');
            const icon = header.querySelector('.toggle-icon');
            
            if (content.style.display === 'block') {
                content.style.display = 'none';
                icon.classList.remove('rotate-icon');
            } else {
                content.style.display = 'block';
                icon.classList.add('rotate-icon');
            }
        }
    </script>
} 