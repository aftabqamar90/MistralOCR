@{
    ViewData["Title"] = "OCR";
}

<div class="container mt-4">
    <h1>Mistral OCR</h1>
    <p class="lead">Extract text from documents using Mistral's OCR API</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>OCR from URL</h5>
                </div>
                <div class="card-body">
                    <form id="ocrForm">
                        <div class="mb-3">
                            <label for="inputDocumentUrl" class="form-label">Document URL</label>
                            <input type="url" class="form-control" id="inputDocumentUrl" name="documentUrl" placeholder="https://example.com/document.pdf" required>
                            <div class="form-text">Enter the URL of a PDF or image document</div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeImages">
                                <label class="form-check-label" for="includeImages">
                                    Include page images (base64)
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="model" class="form-label">Model</label>
                            <select class="form-select" id="model">
                                <option value="mistral-ocr-latest" selected>mistral-ocr-latest</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Process Document</button>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Document History</h5>
                    <button id="refreshDocuments" class="btn btn-sm btn-outline-secondary">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body">
                    <div id="documentsList" class="list-group">
                        <div class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading documents...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="results" class="d-none">
        <div class="card">
            <div class="card-header">
                <h5>OCR Results</h5>
            </div>
            <div class="card-body">
                <ul class="nav nav-tabs" id="resultTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="text-tab" data-bs-toggle="tab" data-bs-target="#text" type="button" role="tab" aria-controls="text" aria-selected="true">Text</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="json-tab" data-bs-toggle="tab" data-bs-target="#json" type="button" role="tab" aria-controls="json" aria-selected="false">JSON</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="images-tab" data-bs-toggle="tab" data-bs-target="#images" type="button" role="tab" aria-controls="images" aria-selected="false">Images</button>
                    </li>
                </ul>
                <div class="tab-content mt-3" id="resultTabsContent">
                    <div class="tab-pane fade show active" id="text" role="tabpanel" aria-labelledby="text-tab">
                        <div id="textContent"></div>
                    </div>
                    <div class="tab-pane fade" id="json" role="tabpanel" aria-labelledby="json-tab">
                        <pre id="jsonContent" class="bg-light p-3 rounded"></pre>
                    </div>
                    <div class="tab-pane fade" id="images" role="tabpanel" aria-labelledby="images-tab">
                        <div id="imagesContent" class="row"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="loading" class="text-center d-none mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Processing document, please wait...</p>
    </div>

    <div id="error" class="alert alert-danger d-none mt-4" role="alert">
    </div>
</div>

<!-- Document Details Modal -->
<div class="modal fade" id="documentModal" tabindex="-1" aria-labelledby="documentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="documentModalLabel">Document Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Title</label>
                    <input type="text" class="form-control" id="documentTitle" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">URL</label>
                    <input type="text" class="form-control" id="modalDocumentUrl" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">Created</label>
                    <input type="text" class="form-control" id="documentCreated" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">Last Processed</label>
                    <input type="text" class="form-control" id="documentLastProcessed" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">Process Count</label>
                    <input type="text" class="form-control" id="documentProcessCount" readonly>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="processDocumentBtn">Process Document</button>
                <button type="button" class="btn btn-danger" id="deleteDocumentBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load documents when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadDocuments();
        });
        
        // Refresh documents button
        document.getElementById('refreshDocuments').addEventListener('click', function() {
            loadDocuments();
        });
        
        // Load documents from API
        async function loadDocuments() {
            const documentsListEl = document.getElementById('documentsList');
            documentsListEl.innerHTML = `
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading documents...</p>
                </div>
            `;
            
            try {
                const response = await fetch('/api/ocr/documents');
                const documents = await response.json();
                
                if (documents.length === 0) {
                    documentsListEl.innerHTML = `
                        <div class="text-center py-3">
                            <p class="text-muted">No documents found</p>
                        </div>
                    `;
                    return;
                }
                
                documentsListEl.innerHTML = '';
                
                documents.forEach(doc => {
                    const lastProcessed = doc.lastProcessedAt 
                        ? new Date(doc.lastProcessedAt).toLocaleString() 
                        : 'Never';
                    
                    const item = document.createElement('a');
                    item.href = '#';
                    item.className = 'list-group-item list-group-item-action';
                    item.dataset.id = doc.id;
                    item.dataset.url = doc.url;
                    item.dataset.title = doc.title;
                    item.dataset.created = new Date(doc.createdAt).toLocaleString();
                    item.dataset.lastProcessed = lastProcessed;
                    item.dataset.processCount = doc.processCount;
                    
                    item.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${doc.title}</h6>
                            <small>${doc.processCount} time${doc.processCount !== 1 ? 's' : ''}</small>
                        </div>
                        <p class="mb-1 text-truncate">${doc.url}</p>
                        <small>Last processed: ${lastProcessed}</small>
                    `;
                    
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        showDocumentModal(this.dataset);
                    });
                    
                    documentsListEl.appendChild(item);
                });
                
            } catch (error) {
                documentsListEl.innerHTML = `
                    <div class="alert alert-danger">
                        Error loading documents: ${error.message}
                    </div>
                `;
            }
        }
        
        // Show document modal
        function showDocumentModal(data) {
            const modal = new bootstrap.Modal(document.getElementById('documentModal'));
            
            document.getElementById('documentModalLabel').textContent = data.title;
            document.getElementById('documentTitle').value = data.title;
            document.getElementById('modalDocumentUrl').value = data.url;
            document.getElementById('documentCreated').value = data.created;
            document.getElementById('documentLastProcessed').value = data.lastProcessed;
            document.getElementById('documentProcessCount').value = data.processCount;
            
            // Set up process button
            const processBtn = document.getElementById('processDocumentBtn');
            processBtn.onclick = function() {
                modal.hide();
                document.getElementById('inputDocumentUrl').value = data.url;
                document.getElementById('ocrForm').dispatchEvent(new Event('submit'));
            };
            
            // Set up delete button
            const deleteBtn = document.getElementById('deleteDocumentBtn');
            deleteBtn.onclick = async function() {
                if (confirm(`Are you sure you want to delete "${data.title}"?`)) {
                    try {
                        const response = await fetch(`/api/ocr/documents/${data.id}`, {
                            method: 'DELETE'
                        });
                        
                        if (response.ok) {
                            modal.hide();
                            loadDocuments();
                        } else {
                            const error = await response.json();
                            alert(`Error: ${error.error || 'Failed to delete document'}`);
                        }
                    } catch (error) {
                        alert(`Error: ${error.message}`);
                    }
                }
            };
            
            modal.show();
        }
        
        // OCR form submission
        document.getElementById('ocrForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const documentUrl = document.getElementById('inputDocumentUrl').value;
            const includeImages = document.getElementById('includeImages').checked;
            const model = document.getElementById('model').value;
            
            // Show loading indicator
            document.getElementById('loading').classList.remove('d-none');
            document.getElementById('results').classList.add('d-none');
            document.getElementById('error').classList.add('d-none');
            
            try {
                const response = await fetch(`/api/ocr/url?url=${encodeURIComponent(documentUrl)}&includeImages=${includeImages}&model=${encodeURIComponent(model)}`);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'An error occurred while processing the document');
                }
                
                // Display results
                displayResults(data);
                document.getElementById('results').classList.remove('d-none');
                
                // Refresh document list
                loadDocuments();
            } catch (error) {
                document.getElementById('error').textContent = error.message;
                document.getElementById('error').classList.remove('d-none');
            } finally {
                document.getElementById('loading').classList.add('d-none');
            }
        });
        
        function displayResults(data) {
            // Display text content
            const textContentDiv = document.getElementById('textContent');
            textContentDiv.innerHTML = '';
            
            if (data.pages && data.pages.length > 0) {
                data.pages.forEach((page, index) => {
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'mb-4';
                    
                    const pageHeader = document.createElement('h5');
                    pageHeader.textContent = `Page ${page.pageNumber}`;
                    pageDiv.appendChild(pageHeader);
                    
                    const pageText = document.createElement('div');
                    pageText.className = 'bg-light p-3 rounded';
                    pageText.style.whiteSpace = 'pre-wrap';
                    pageText.textContent = page.text;
                    pageDiv.appendChild(pageText);
                    
                    textContentDiv.appendChild(pageDiv);
                });
            } else {
                textContentDiv.textContent = 'No text content found';
            }
            
            // Display JSON
            document.getElementById('jsonContent').textContent = JSON.stringify(data, null, 2);
            
            // Display images if available
            const imagesContentDiv = document.getElementById('imagesContent');
            imagesContentDiv.innerHTML = '';
            
            if (data.pages && data.pages.length > 0) {
                data.pages.forEach((page, index) => {
                    if (page.imageBase64) {
                        const colDiv = document.createElement('div');
                        colDiv.className = 'col-md-6 mb-3';
                        
                        const card = document.createElement('div');
                        card.className = 'card';
                        
                        const cardHeader = document.createElement('div');
                        cardHeader.className = 'card-header';
                        cardHeader.textContent = `Page ${page.pageNumber}`;
                        card.appendChild(cardHeader);
                        
                        const cardBody = document.createElement('div');
                        cardBody.className = 'card-body';
                        
                        const img = document.createElement('img');
                        img.className = 'img-fluid';
                        img.src = `data:image/png;base64,${page.imageBase64}`;
                        img.alt = `Page ${page.pageNumber}`;
                        cardBody.appendChild(img);
                        
                        card.appendChild(cardBody);
                        colDiv.appendChild(card);
                        imagesContentDiv.appendChild(colDiv);
                    }
                });
                
                if (imagesContentDiv.children.length === 0) {
                    imagesContentDiv.textContent = 'No images available. Enable "Include page images" option to see images.';
                }
            } else {
                imagesContentDiv.textContent = 'No images available';
            }
        }
    </script>
} 