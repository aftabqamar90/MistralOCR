@model MistralOCR.Models.FileUploadViewModel
@{
    ViewData["Title"] = "Mistral OCR";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="text-center mb-5 animate-on-scroll">
                <h1 class="display-4 fw-bold mb-3">Mistral OCR</h1>
                <p class="lead text-muted">Extract text from your PDF documents using Mistral AI's powerful OCR capabilities</p>
            </div>
            
            <div class="card shadow-sm animate-on-scroll">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="bi bi-cloud-upload me-2 pulse"></i>Upload PDF Document</h3>
                </div>
                <div class="card-body">
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="pdfFile" class="form-label">Select PDF File</label>
                            <input type="file" class="form-control" id="pdfFile" name="file" accept=".pdf" required>
                            <div class="form-text">Select a PDF file to upload</div>
                        </div>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </form>
                    
                    <div id="uploadProgress" class="progress mt-3 d-none" style="height: 20px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>
                    
                    <div id="uploadResult" class="mt-3 d-none">
                        <div class="alert alert-success">
                            <h5>Upload Successful!</h5>
                            <p id="uploadResultMessage"></p>
                            <div class="mt-2">
                                <a id="fileUrlLink" href="#" target="_blank" class="btn btn-sm btn-outline-primary">View File</a>
                                <a id="ocrLink" href="#" class="btn btn-sm btn-outline-secondary">Process with OCR</a>
                            </div>
                        </div>
                    </div>
                    
                    <div id="uploadError" class="alert alert-danger mt-3 d-none">
                        <h5>Upload Failed</h5>
                        <p id="errorMessage"></p>
                    </div>
                </div>
            </div>
            
            <div class="mt-5 text-center animate-on-scroll">
                <h3 class="mb-4">How It Works</h3>
                <div class="row">
                    <div class="col-md-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="display-4 mb-3 text-primary">
                                    <i class="bi bi-upload"></i>
                                </div>
                                <h5>1. Upload</h5>
                                <p class="text-muted">Upload your PDF document to our secure platform</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="display-4 mb-3 text-primary">
                                    <i class="bi bi-cpu"></i>
                                </div>
                                <h5>2. Process</h5>
                                <p class="text-muted">Mistral AI processes your document with advanced OCR</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="display-4 mb-3 text-primary">
                                    <i class="bi bi-chat-dots"></i>
                                </div>
                                <h5>3. Ask</h5>
                                <p class="text-muted">Ask questions about your document content</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="display-4 mb-3 text-primary">
                                    <i class="bi bi-lightbulb"></i>
                                </div>
                                <h5>4. Get Insights</h5>
                                <p class="text-muted">Receive AI-powered answers and insights</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadDocuments();
            
            // Set up form submission
            document.getElementById('uploadForm').addEventListener('submit', function(e) {
                e.preventDefault();
                uploadFile();
            });
        });
        
        async function uploadFile() {
            const fileInput = document.getElementById('pdfFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Please select a file to upload');
                return;
            }
            
            // Check if file is PDF
            if (file.type !== 'application/pdf') {
                alert('Only PDF files are supported');
                return;
            }
            
            // Show progress bar
            const progressBar = document.getElementById('uploadProgress');
            const progressBarInner = progressBar.querySelector('.progress-bar');
            progressBar.classList.remove('d-none');
            
            // Hide previous results
            document.getElementById('uploadResult').classList.add('d-none');
            document.getElementById('uploadError').classList.add('d-none');
            
            // Create form data
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await axios.post('/home/upload', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    },
                    onUploadProgress: progressEvent => {
                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                        progressBarInner.style.width = percentCompleted + '%';
                        progressBarInner.textContent = percentCompleted + '%';
                    }
                });
                
                // Handle successful upload
                if (response.data.isSuccess) {
                    const result = response.data;
                    
                    // Show success message
                    document.getElementById('uploadResultMessage').textContent = `File "${result.fileName}" uploaded successfully.`;
                    
                    // Set up links
                    const fileUrlLink = document.getElementById('fileUrlLink');
                    fileUrlLink.href = result.fileUrl;
                    
                    const ocrLink = document.getElementById('ocrLink');
                    ocrLink.href = '/Home/Ocr';
                    
                    // Show result
                    document.getElementById('uploadResult').classList.remove('d-none');
                    
                    // Clear file input
                    fileInput.value = '';
                    
                    // Refresh documents list
                    loadDocuments();
                } else {
                    // Show error
                    document.getElementById('errorMessage').textContent = response.data.errorMessage || 'Unknown error occurred';
                    document.getElementById('uploadError').classList.remove('d-none');
                }
            } catch (error) {
                console.error('Upload error:', error);
                document.getElementById('errorMessage').textContent = error.response?.data?.errorMessage || error.message || 'An error occurred during upload';
                document.getElementById('uploadError').classList.remove('d-none');
            } finally {
                // Hide progress after a short delay
                setTimeout(() => {
                    progressBar.classList.add('d-none');
                }, 1000);
            }
        }
        
        async function loadDocuments() {
            const documentsListEl = document.getElementById('documentsList');
            
            try {
                const response = await axios.get('/api/ocr/documents');
                const documents = response.data;
                
                if (documents.length === 0) {
                    documentsListEl.innerHTML = `
                        <div class="text-center py-3">
                            <p class="text-muted">No documents found</p>
                        </div>
                    `;
                    return;
                }
                
                documentsListEl.innerHTML = '';
                
                // Show only the 5 most recent documents
                const recentDocs = documents.slice(0, 5);
                
                recentDocs.forEach(doc => {
                    const lastProcessed = doc.lastProcessedAt 
                        ? new Date(doc.lastProcessedAt).toLocaleString() 
                        : 'Never';
                    
                    const item = document.createElement('a');
                    item.href = '/Home/Ocr';
                    item.className = 'list-group-item list-group-item-action';
                    
                    item.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${doc.title}</h6>
                            <small>${doc.processCount} time${doc.processCount !== 1 ? 's' : ''}</small>
                        </div>
                        <p class="mb-1 text-truncate">${doc.url}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <small>Last processed: ${lastProcessed}</small>
                            <a href="/Home/ProcessDocument/${doc.id}" class="btn btn-sm btn-outline-primary">
                                Process
                            </a>
                        </div>
                    `;
                    
                    documentsListEl.appendChild(item);
                });
                
                if (documents.length > 5) {
                    const viewMoreLink = document.createElement('a');
                    viewMoreLink.href = '/Home/Ocr';
                    viewMoreLink.className = 'btn btn-sm btn-outline-primary mt-2 w-100';
                    viewMoreLink.textContent = 'View All Documents';
                    documentsListEl.appendChild(viewMoreLink);
                }
                
            } catch (error) {
                console.error('Error loading documents:', error);
                documentsListEl.innerHTML = `
                    <div class="alert alert-danger">
                        Error loading documents: ${error.message}
                    </div>
                `;
            }
        }
    </script>
}
