@model MistralOCR.Models.FileUploadViewModel
@using Microsoft.Extensions.Options
@inject IOptions<MistralOCR.Models.AppSettings> AppSettings
@{
    ViewData["Title"] = "Mistral OCR";
    var ocrModel = AppSettings.Value.MistralAI.Models.OCR;
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="text-center mb-5 animate-on-scroll">
                <h1 class="display-4 fw-bold mb-3">Mistral OCR</h1>
                <p class="lead text-muted">Extract text from documents using Mistral's OCR API</p>
            </div>
            
            <!-- Upload Card -->
            <div class="card shadow-sm mb-5 animate-on-scroll">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="bi bi-cloud-upload me-2 pulse"></i>Upload PDF Document</h3>
                </div>
                <div class="card-body">
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="pdfFile" class="form-label">Select PDF File</label>
                            <input type="file" class="form-control" id="pdfFile" name="file" accept=".pdf" required>
                            <div class="form-text">Select a PDF file to upload</div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeImages">
                                <label class="form-check-label" for="includeImages">
                                    Include page images (base64)
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="model" class="form-label">Model</label>
                            <select class="form-select" id="model">
                                <option value="@ocrModel" selected>@ocrModel</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </form>
                    
                    <div id="uploadProgress" class="progress mt-3 d-none" style="height: 20px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>
                    
                    <div id="uploadResult" class="mt-3 d-none">
                        <div class="alert alert-success">
                            <h5>Upload Successful!</h5>
                            <p id="uploadResultMessage"></p>
                        </div>
                    </div>
                    
                    <div id="uploadError" class="alert alert-danger mt-3 d-none">
                        <h5>Upload Failed</h5>
                        <p id="errorMessage"></p>
                    </div>
                </div>
            </div>
            
            <!-- Documents Grid -->
            <div class="card shadow-sm animate-on-scroll">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0"><i class="bi bi-files me-2"></i>Document History</h3>
                    <button id="refreshDocuments" class="btn btn-sm btn-light">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body">
                    <div id="documentsGrid" class="row g-3">
                        <!-- Documents will be loaded here -->
                        <div class="col-12 text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading documents...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel"><i class="bi bi-exclamation-triangle-fill me-2"></i>Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this document?</p>
                <p class="fw-bold" id="deleteDocumentTitle"></p>
                <p class="text-danger"><small>This action cannot be undone.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadDocuments();
            
            // Set up form submission
            document.getElementById('uploadForm').addEventListener('submit', function(e) {
                e.preventDefault();
                uploadFile();
            });
            
            // Set up refresh button
            document.getElementById('refreshDocuments').addEventListener('click', function() {
                loadDocuments();
            });
        });
        
        async function uploadFile() {
            const fileInput = document.getElementById('pdfFile');
            const file = fileInput.files[0];
            const includeImages = document.getElementById('includeImages').checked;
            const model = document.getElementById('model').value;
            
            if (!file) {
                alert('Please select a file to upload');
                return;
            }
            
            // Check if file is PDF
            if (file.type !== 'application/pdf') {
                alert('Only PDF files are supported');
                return;
            }
            
            // Show progress bar
            const progressBar = document.getElementById('uploadProgress');
            const progressBarInner = progressBar.querySelector('.progress-bar');
            progressBar.classList.remove('d-none');
            
            // Hide previous results
            document.getElementById('uploadResult').classList.add('d-none');
            document.getElementById('uploadError').classList.add('d-none');
            
            // Create form data
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await axios.post('/api/ocr/upload', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    },
                    onUploadProgress: progressEvent => {
                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                        progressBarInner.style.width = percentCompleted + '%';
                        progressBarInner.textContent = percentCompleted + '%';
                    }
                });
                
                // Handle successful upload
                if (response.data.isSuccess) {
                    const result = response.data;
                    
                    // Clear file input
                    fileInput.value = '';
                    
                    // Show success message
                    document.getElementById('uploadResultMessage').textContent = `File "${result.fileName}" uploaded successfully.`;
                    document.getElementById('uploadResult').classList.remove('d-none');
                    
                    // Refresh documents list
                    loadDocuments();
                    
                    // If document ID is available, redirect to process page
                    if (result.documentId) {
                        window.location.href = `/Home/ProcessDocument/${result.documentId}`;
                    }
                } else {
                    // Show error
                    document.getElementById('errorMessage').textContent = response.data.errorMessage || 'Unknown error occurred';
                    document.getElementById('uploadError').classList.remove('d-none');
                }
            } catch (error) {
                console.error('Upload error:', error);
                document.getElementById('errorMessage').textContent = error.response?.data?.errorMessage || error.message || 'An error occurred during upload';
                document.getElementById('uploadError').classList.remove('d-none');
            } finally {
                // Hide progress after a short delay
                setTimeout(() => {
                    progressBar.classList.add('d-none');
                }, 1000);
            }
        }
        
        async function loadDocuments() {
            const documentsGrid = document.getElementById('documentsGrid');
            
            // Show loading state
            documentsGrid.innerHTML = `
                <div class="col-12 text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading documents...</p>
                </div>
            `;
            
            try {
                const response = await axios.get('/api/ocr/documents');
                const documents = response.data;
                
                if (documents.length === 0) {
                    documentsGrid.innerHTML = `
                        <div class="col-12 text-center py-4">
                            <i class="bi bi-file-earmark-x display-4 text-muted"></i>
                            <p class="mt-2 text-muted">No documents found</p>
                            <p class="text-muted">Upload a PDF document to get started</p>
                        </div>
                    `;
                    return;
                }
                
                // Clear the grid
                documentsGrid.innerHTML = '';
                
                // Add each document as a card
                documents.forEach(doc => {
                    const lastProcessed = doc.lastProcessedAt 
                        ? new Date(doc.lastProcessedAt).toLocaleString() 
                        : 'Never';
                    
                    const documentCard = document.createElement('div');
                    documentCard.className = 'col-md-6 col-lg-3 col-xl-2';
                    
                    documentCard.innerHTML = `
                        <div class="card h-100 shadow-sm hover-shadow">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <h5 class="card-title text-truncate" title="${doc.title}">${doc.title}</h5>
                                    <span class="badge bg-primary rounded-pill">${doc.processCount} time${doc.processCount !== 1 ? 's' : ''}</span>
                                </div>
                                <p class="card-text text-truncate text-muted small" title="${doc.url}">${doc.url}</p>
                                <p class="card-text small">
                                    <i class="bi bi-clock-history"></i> Last processed: ${lastProcessed}
                                </p>
                            </div>
                            <div class="card-footer bg-transparent border-top-0 d-flex justify-content-between">
                                <a href="/Home/ProcessDocument/${doc.id}" class="btn btn-primary flex-grow-1 me-2">
                                    <i class="bi bi-file-earmark-text me-1"></i> Process
                                </a>
                                <button class="btn btn-danger delete-doc-btn" data-id="${doc.id}" data-title="${doc.title}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    
                    documentsGrid.appendChild(documentCard);
                });
                
                // Set up delete buttons
                document.querySelectorAll('.delete-doc-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const docId = this.getAttribute('data-id');
                        const docTitle = this.getAttribute('data-title');
                        showDeleteConfirmation(docId, docTitle);
                    });
                });
            } catch (error) {
                console.error('Error loading documents:', error);
                documentsGrid.innerHTML = `
                    <div class="col-12 text-center py-4">
                        <i class="bi bi-exclamation-triangle display-4 text-danger"></i>
                        <p class="mt-2 text-danger">Error loading documents</p>
                        <p class="text-muted">${error.message || 'An unknown error occurred'}</p>
                    </div>
                `;
            }
        }
        
        function showDeleteConfirmation(docId, docTitle) {
            // Set the document title in the modal
            document.getElementById('deleteDocumentTitle').textContent = docTitle;
            
            // Set up the confirm delete button
            const confirmBtn = document.getElementById('confirmDeleteBtn');
            confirmBtn.onclick = async function() {
                await deleteDocument(docId);
                // Hide the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                modal.hide();
            };
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }
        
        async function deleteDocument(docId) {
            try {
                await axios.delete(`/api/ocr/documents/${docId}`);
                
                // Show success toast
                showToast('Document deleted successfully', 'success');
                
                // Refresh the documents list
                loadDocuments();
            } catch (error) {
                console.error('Error deleting document:', error);
                showToast(`Error deleting document: ${error.response?.data?.error || error.message || 'Unknown error'}`, 'danger');
            }
        }
        
        function showToast(message, type = 'info') {
            const toastContainer = document.querySelector('.toast-container');
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 3000
            });
            
            bsToast.show();
            
            // Remove the toast from the DOM after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }
    </script>
    
    <style>
        .hover-shadow {
            transition: all 0.3s ease;
        }
        
        .hover-shadow:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }
        
        /* Pulse animation for upload icon */
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
            display: inline-block;
        }
        
        .toast-container {
            z-index: 1060;
        }
    </style>
}
