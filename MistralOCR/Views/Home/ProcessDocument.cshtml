@model MistralOCR.Models.DocumentRecord
@using Microsoft.Extensions.Options
@inject IOptions<MistralOCR.Models.AppSettings> AppSettings
@{
    ViewData["Title"] = "Process Document";
    var ocrModel = AppSettings.Value.MistralAI.Models.OCR;
    var chatSmallModel = AppSettings.Value.MistralAI.Models.ChatSmall;
    var chatMediumModel = AppSettings.Value.MistralAI.Models.ChatMedium;
    var chatLargeModel = AppSettings.Value.MistralAI.Models.ChatLarge;
    var requestTimeoutMs = AppSettings.Value.MistralAI.Timeouts.RequestTimeoutSeconds * 1000;
}

<style>
    :root {
        --primary-color: #6366f1;
        --primary-hover: #4f46e5;
        --secondary-color: #10b981;
        --secondary-hover: #059669;
        --accent-color: #f59e0b;
        --dark-color: #1f2937;
        --light-color: #f3f4f6;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --hover-transition: all 0.3s ease;
    }

    /* Pulse animation for the chat badge */
    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.1);
            opacity: 0.8;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    .pulse-badge {
        animation: pulse 1.5s infinite;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
        color: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--card-shadow);
    }

    .custom-card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: var(--card-shadow);
        transition: var(--hover-transition);
    }

        .custom-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
        color: white;
        border-top-left-radius: 0.5rem !important;
        border-top-right-radius: 0.5rem !important;
        font-weight: 600;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        transition: var(--hover-transition);
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

    .btn-secondary {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        transition: var(--hover-transition);
    }

        .btn-secondary:hover {
            background-color: var(--secondary-hover);
            border-color: var(--secondary-hover);
            transform: translateY(-2px);
        }

    .btn-outline-secondary {
        color: var(--dark-color);
        border-color: var(--dark-color);
        transition: var(--hover-transition);
    }

        .btn-outline-secondary:hover {
            background-color: var(--dark-color);
            color: white;
            transform: translateY(-2px);
        }

    .form-control, .form-select {
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
        padding: 0.625rem;
        transition: var(--hover-transition);
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(99, 102, 241, 0.25);
        }

    .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .spinner-border {
        color: var(--primary-color);
    }

    .alert-danger {
        background-color: #fee2e2;
        border-color: #fecaca;
        color: #b91c1c;
    }

    .alert-warning {
        background-color: #fef3c7;
        border-color: #fde68a;
        color: #92400e;
    }

    .result-section {
        background-color: var(--light-color);
        border-radius: 0.5rem;
        padding: 1rem;
    }

    .copy-btn {
        background-color: var(--accent-color);
        color: white;
        border: none;
        transition: var(--hover-transition);
    }

        .copy-btn:hover {
            background-color: #d97706;
            transform: translateY(-2px);
        }

    .empty-state {
        color: #6b7280;
        transition: var(--hover-transition);
    }

        .empty-state:hover {
            color: var(--primary-color);
        }

    .section-label {
        color: var(--primary-color);
        font-weight: 600;
    }

    .data-value {
        color: var(--dark-color);
        font-weight: 500;
    }

    .page-number {
        background-color: var(--primary-color);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 0.25rem;
        display: inline-block;
        margin-bottom: 0.5rem;
    }
    
    .btn-danger {
        background-color: #ef4444;
        border-color: #ef4444;
        transition: var(--hover-transition);
    }
    
    .btn-danger:hover {
        background-color: #dc2626;
        border-color: #dc2626;
        transform: translateY(-2px);
    }
    
    .toast-container {
        z-index: 1060;
    }
</style>

<div class="container-fluid mt-4">
    <div class="page-header d-flex justify-content-between align-items-center">
        <div>
            <h1 class="mb-2">Process Document</h1>
            <p class="lead mb-0">Perform OCR operations on the selected document</p>
        </div>
        <a href="/" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to Home
        </a>
    </div>

    <div class="row">
        <div class="col-md-4 col-lg-3">
            <div class="custom-card card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-file-earmark-text me-2"></i>Document Details</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label section-label">Title</label>
                        <p class="data-value">@Model.Title</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label section-label">URL</label>
                        <p class="text-break data-value">
                            <a href="@Model.Url" target="_blank" class="text-decoration-none">@Model.Url</a>
                        </p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label section-label">Created</label>
                        <p class="data-value">@Model.CreatedAt.ToString("g")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label section-label">Last Processed</label>
                        <p class="data-value">@(Model.LastProcessedAt?.ToString("g") ?? "Never")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label section-label">Process Count</label>
                        <p class="data-value">@Model.ProcessCount time@(Model.ProcessCount != 1 ? "s" : "")</p>
                    </div>
                    <div class="d-grid gap-2">
                        <a href="/Home/DocumentLogs/@Model.Id" class="btn btn-primary mb-3">
                            <i class="bi bi-chat-dots me-2"></i> View Question History
                        </a>
                        <button id="deleteDocumentBtn" class="btn btn-danger">
                            <i class="bi bi-trash me-2"></i> Delete Document
                        </button>
                    </div>
                </div>
            </div>

            <div class="custom-card card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-gear-fill me-2"></i>OCR Options</h5>
                </div>
                <div class="card-body">
                    <form id="ocrOptionsForm">
                        <input type="hidden" id="documentId" value="@Model.Id">
                        <input type="hidden" id="documentUrl" value="@Model.Url">

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeImages">
                                <label class="form-check-label" for="includeImages">
                                    Include page images (base64)
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="model" class="form-label section-label">Model</label>
                            <select class="form-select" id="model">
                                <option value="@ocrModel" selected>@ocrModel</option>
                            </select>
                        </div>
                        <button type="button" id="processOcrBtn" class="btn btn-primary w-100">
                            <i class="bi bi-file-earmark-text me-2"></i> Process OCR
                        </button>
                    </form>
                </div>
            </div>

            <div class="custom-card card mb-4" style="border-left: 4px solid var(--secondary-color); box-shadow: 0 0 15px rgba(16, 185, 129, 0.1);">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-chat-dots me-2"></i>Ask Questions</h5>
                </div>
                <div class="card-body">
                    <form id="questionForm">
                        <div class="mb-3">
                            <label for="question" class="form-label section-label">Question</label>
                            <textarea class="form-control" id="question" rows="3" placeholder="Ask a question about this document..."></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="chatModel" class="form-label section-label">Model</label>
                            <select class="form-select" id="chatModel">
                                <option value="@chatSmallModel" selected>@chatSmallModel</option>
                                <option value="@chatMediumModel">@chatMediumModel</option>
                                <option value="@chatLargeModel">@chatLargeModel</option>
                            </select>
                        </div>
                        <button type="button" id="askQuestionBtn" class="btn btn-secondary w-100 position-relative">
                            <i class="bi bi-chat-dots me-2"></i> Ask Question
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger pulse-badge">
                                Chat
                            </span>
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-8 col-lg-9">
            <div class="custom-card card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 id="resultTitle" class="mb-0"><i class="bi bi-clipboard-data me-2"></i>Results</h5>
                    <div class="d-flex align-items-center">
                        <div id="searchContainer" class="input-group me-2" style="display: none;">
                            <input type="text" id="resultSearchInput" class="form-control form-control-sm" placeholder="Search results..." aria-label="Search results">
                            <button class="btn btn-sm btn-light" type="button" id="resultSearchButton">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                        <button id="copyResultBtn" class="btn btn-sm copy-btn" style="display: none;">
                            <i class="bi bi-clipboard me-1"></i> Copy
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="loadingIndicator" style="display: none;">
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <p class="text-center">Processing document, please wait...</p>
                    </div>

                    <div id="resultContent">
                        <div class="text-center py-5 empty-state">
                            <i class="bi bi-file-earmark-text" style="font-size: 4rem;"></i>
                            <p class="mt-3 fs-5">Select an operation to process this document</p>
                            <div class="mt-4">
                                <p class="text-primary">
                                    <i class="bi bi-chat-dots me-2"></i>
                                    <strong>You can now chat with your document!</strong>
                                </p>
                                <p class="text-muted">Use the "Ask Questions" panel on the left to interact with your document content.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div id="noSearchResults" class="text-center py-5" style="display: none;">
                        <i class="bi bi-search" style="font-size: 3rem;"></i>
                        <p class="mt-3">No results match your search criteria</p>
                        <button id="clearSearchBtn" class="btn btn-sm btn-outline-secondary mt-2">
                            <i class="bi bi-x-circle me-1"></i> Clear Search
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel"><i class="bi bi-exclamation-triangle-fill me-2"></i>Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this document?</p>
                <p class="fw-bold">@Model.Title</p>
                <p class="text-danger"><small>This action cannot be undone.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast container for notifications -->
<div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

@section Scripts {
    <script>
        // Ensure loading overlay is hidden when page loads
        document.addEventListener('DOMContentLoaded', function() {
            if (window.hideLoading) {
                window.hideLoading();
            }
        });

        // Function to validate base64 data
        function isValidBase64(str) {
            if (!str) return false;
            try {
                // A more reliable way to check if a string is valid base64
                return str.match(/^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/) !== null;
            } catch (err) {
                return false;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const documentId = document.getElementById('documentId').value;
            const documentUrl = document.getElementById('documentUrl').value;
            const resultContent = document.getElementById('resultContent');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const resultTitle = document.getElementById('resultTitle');
            const copyResultBtn = document.getElementById('copyResultBtn');
            const searchContainer = document.getElementById('searchContainer');
            const resultSearchInput = document.getElementById('resultSearchInput');
            const resultSearchButton = document.getElementById('resultSearchButton');
            const noSearchResults = document.getElementById('noSearchResults');
            const clearSearchBtn = document.getElementById('clearSearchBtn');
            
            // Original content before search
            let originalContent = '';

            // Add pulse animation to buttons
            const addButtonPulse = (button) => {
                button.addEventListener('mouseenter', function() {
                    this.classList.add('shadow-lg');
                });
                button.addEventListener('mouseleave', function() {
                    this.classList.remove('shadow-lg');
                });
            };

            addButtonPulse(document.getElementById('processOcrBtn'));
            addButtonPulse(document.getElementById('askQuestionBtn'));
            addButtonPulse(document.getElementById('deleteDocumentBtn'));

            // Process OCR button
            document.getElementById('processOcrBtn').addEventListener('click', async function() {
                const includeImages = document.getElementById('includeImages').checked;
                const model = document.getElementById('model').value;

                // Show loading
                resultTitle.innerHTML = '<i class="bi bi-clipboard-data me-2"></i>OCR Results';
                resultContent.style.display = 'none';
                loadingIndicator.style.display = 'block';
                copyResultBtn.style.display = 'none';
                searchContainer.style.display = 'none';
                noSearchResults.style.display = 'none';

                try {
                    const response = await axios.get(`/api/ocr/url?url=${encodeURIComponent(documentUrl)}&includeImages=${includeImages}&model=${model}`, {
                        timeout: @requestTimeoutMs // Timeout from configuration
                    });

                    // Hide loading
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';

                    if (response.data && response.data.pages) {
                        // Show copy button and search
                        copyResultBtn.style.display = 'block';
                        searchContainer.style.display = 'flex';

                        // Display OCR results
                        let html = '';

                        response.data.pages.forEach((page, index) => {
                            html += `<div class="mb-4 result-section">`;
                            html += `<div class="page-number mb-2">Page ${page.index + 1}</div>`;

                            // Display page dimensions if available
                            if (page.dimensions) {
                                html += `<div class="small text-muted mb-2">
                                    Dimensions: ${page.dimensions.width}x${page.dimensions.height} (DPI: ${page.dimensions.dpi})
                                </div>`;
                            }

                            // Display images if available
                            if (page.images && page.images.length > 0) {
                                page.images.forEach((image, imgIndex) => {
                                    if (image.image_base64) {
                                        // Validate base64 data
                                        const isValid = isValidBase64(image.image_base64);

                                        // Determine the correct MIME type based on the image ID or extension
                                        const imageId = image.id || '';
                                        let mimeType = 'image/png'; // Default MIME type
                                        
                                        if (imageId.toLowerCase().endsWith('.jpeg') || imageId.toLowerCase().endsWith('.jpg')) {
                                            mimeType = 'image/jpeg';
                                        } else if (imageId.toLowerCase().endsWith('.gif')) {
                                            mimeType = 'image/gif';
                                        } else if (imageId.toLowerCase().endsWith('.webp')) {
                                            mimeType = 'image/webp';
                                        }
                                        
                                        // For img-0.jpeg format, also check for this pattern
                                        if (imageId.match(/img-\d+\.jpe?g/i)) {
                                            mimeType = 'image/jpeg';
                                        }

                                        html += `<div class="mb-3">
                                            <div class="small text-muted mb-1">Image ${imgIndex + 1} (ID: ${image.id})</div>`;

                                        if (isValid) {
                                            html += `<img src="data:${mimeType};base64,${image.image_base64}"
                                                class="img-fluid border rounded shadow-sm"
                                                alt="Page ${page.index + 1} - Image ${imgIndex + 1}"
                                                onerror="this.onerror=null; this.src=''; this.alt='Image failed to load'; this.parentElement.innerHTML += '<div class=\'alert alert-warning mt-2\'><i class=\'bi bi-exclamation-triangle me-2\'></i>Image failed to load. The image data may be corrupted or in an unsupported format.</div>';">`;
                                        } else {
                                            html += `<div class="alert alert-warning">
                                                <i class="bi bi-exclamation-triangle me-2"></i>
                                                Invalid image data. The base64 encoding appears to be corrupted.
                                            </div>`;
                                        }

                                        html += `<div class="small text-muted mt-1">
                                                Position: (${image.top_left_x},${image.top_left_y}) to (${image.bottom_right_x},${image.bottom_right_y})
                                            </div>
                                        </div>`;
                                    }
                                });
                            }

                            // Display text
                            html += `<div class="card custom-card">
                                <div class="card-body">
                                    <pre class="mb-0 searchable-content" style="white-space: pre-wrap; color: var(--dark-color);">${page.markdown || 'No text content available'}</pre>
                                </div>
                            </div>`;

                            html += `</div>`;
                        });

                        resultContent.innerHTML = html;
                        originalContent = html; // Store original content for search reset
                    } else {
                        resultContent.innerHTML = `<div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            No OCR results found or invalid response format.
                        </div>`;
                    }
                } catch (error) {
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';

                    resultContent.innerHTML = `<div class="alert alert-danger">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        Error: ${error.response?.data?.error || error.message || 'Unknown error'}
                    </div>`;
                }
            });

            // Ask Question button
            document.getElementById('askQuestionBtn').addEventListener('click', async function() {
                const question = document.getElementById('question').value.trim();
                const chatModel = document.getElementById('chatModel').value;

                if (!question) {
                    alert('Please enter a question');
                    return;
                }

                // Show loading
                resultTitle.innerHTML = '<i class="bi bi-clipboard-data me-2"></i>Answer';
                resultContent.style.display = 'none';
                loadingIndicator.style.display = 'block';
                copyResultBtn.style.display = 'none';
                searchContainer.style.display = 'none';
                noSearchResults.style.display = 'none';

                try {
                    const response = await axios.post('/Home/AskQuestion', {
                        question: question,
                        documentUrl: documentUrl,
                        model: chatModel
                    }, {
                        timeout: 180000 // 3 minutes timeout
                    });

                    // Hide loading
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';

                    if (response.data && response.data.answer) {
                        // Show copy button and search
                        copyResultBtn.style.display = 'block';
                        searchContainer.style.display = 'flex';

                        // Display answer
                        const html = `
                            <div class="card custom-card result-section">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <strong class="section-label"><i class="bi bi-question-circle me-2"></i>Question:</strong>
                                        <p class="mt-2 data-value searchable-content">${question}</p>
                                    </div>
                                    <hr>
                                    <div>
                                        <strong class="section-label"><i class="bi bi-chat-left-text me-2"></i>Answer:</strong>
                                        <p class="mt-2 data-value searchable-content" style="white-space: pre-wrap;">${response.data.answer}</p>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        resultContent.innerHTML = html;
                        originalContent = html; // Store original content for search reset
                    } else {
                        resultContent.innerHTML = `<div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            No answer found or invalid response format.
                        </div>`;
                    }
                } catch (error) {
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';

                    resultContent.innerHTML = `<div class="alert alert-danger">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        Error: ${error.response?.data?.error || error.message || 'Unknown error'}
                    </div>`;
                }
            });

            // Copy result button
            copyResultBtn.addEventListener('click', function() {
                const textToCopy = resultContent.textContent;

                navigator.clipboard.writeText(textToCopy)
                    .then(() => {
                        const originalText = this.innerHTML;
                        this.innerHTML = '<i class="bi bi-check me-1"></i> Copied!';

                        setTimeout(() => {
                            this.innerHTML = originalText;
                        }, 2000);
                    })
                    .catch(err => {
                        console.error('Failed to copy text: ', err);
                    });
            });
            
            // Delete document button
            document.getElementById('deleteDocumentBtn').addEventListener('click', function() {
                // Show the confirmation modal
                const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
                modal.show();
            });
            
            // Confirm delete button
            document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
                try {
                    await axios.delete(`/api/ocr/documents/${documentId}`);
                    
                    // Show success toast
                    showToast('Document deleted successfully', 'success');
                    
                    // Redirect to home page after a short delay
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 1500);
                } catch (error) {
                    console.error('Error deleting document:', error);
                    
                    // Hide the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                    modal.hide();
                    
                    // Show error toast
                    showToast(`Error deleting document: ${error.response?.data?.error || error.message || 'Unknown error'}`, 'danger');
                }
            });
            
            // Search functionality
            resultSearchButton.addEventListener('click', searchResults);
            
            // Enable search on Enter key
            resultSearchInput.addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    searchResults();
                }
            });
            
            // Clear search button
            clearSearchBtn.addEventListener('click', function() {
                resultSearchInput.value = '';
                resetSearch();
            });
            
            function searchResults() {
                const searchTerm = resultSearchInput.value.trim().toLowerCase();
                
                if (!searchTerm) {
                    resetSearch();
                    return;
                }
                
                // If there's no original content stored, store it now
                if (!originalContent) {
                    originalContent = resultContent.innerHTML;
                }
                
                // Check if there's any searchable content
                const searchableElements = resultContent.querySelectorAll('.searchable-content');
                if (searchableElements.length === 0) {
                    return; // Nothing to search
                }
                
                let matchFound = false;
                
                // Create a temporary div to hold the content for searching
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = originalContent;
                
                // Search through each searchable element
                tempDiv.querySelectorAll('.searchable-content').forEach(element => {
                    const content = element.textContent.toLowerCase();
                    
                    if (content.includes(searchTerm)) {
                        matchFound = true;
                        
                        // Highlight the matches
                        let highlightedContent = element.innerHTML;
                        const regex = new RegExp(searchTerm, 'gi');
                        highlightedContent = highlightedContent.replace(regex, match => 
                            `<span class="bg-warning">${match}</span>`
                        );
                        
                        element.innerHTML = highlightedContent;
                    }
                });
                
                if (matchFound) {
                    resultContent.innerHTML = tempDiv.innerHTML;
                    resultContent.style.display = 'block';
                    noSearchResults.style.display = 'none';
                } else {
                    resultContent.style.display = 'none';
                    noSearchResults.style.display = 'block';
                }
            }
            
            function resetSearch() {
                if (originalContent) {
                    resultContent.innerHTML = originalContent;
                }
                resultContent.style.display = 'block';
                noSearchResults.style.display = 'none';
            }
            
            // Function to show toast notifications
            function showToast(message, type = 'info') {
                const toastContainer = document.querySelector('.toast-container');
                
                const toast = document.createElement('div');
                toast.className = `toast align-items-center text-white bg-${type} border-0`;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                
                toastContainer.appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast, {
                    autohide: true,
                    delay: 3000
                });
                
                bsToast.show();
                
                // Remove the toast from the DOM after it's hidden
                toast.addEventListener('hidden.bs.toast', function() {
                    toast.remove();
                });
            }
        });
    </script>
} 